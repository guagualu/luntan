// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: microuser/proto/user.proto

package microuser

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserService service

func NewUserServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserService service

type UserService interface {
	Create(ctx context.Context, in *Createequest, opts ...client.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *Usergetrequest, opts ...client.CallOption) (*Usergetresponse, error)
	Update(ctx context.Context, in *Updaterequest, opts ...client.CallOption) (*Updateresponse, error)
	Paihang(ctx context.Context, in *Userpaihangrequest, opts ...client.CallOption) (*Userpaihangresponse, error)
	Dengluget(ctx context.Context, in *Userdenglugetrequest, opts ...client.CallOption) (*Userdenglugetresponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) Create(ctx context.Context, in *Createequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Get(ctx context.Context, in *Usergetrequest, opts ...client.CallOption) (*Usergetresponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Get", in)
	out := new(Usergetresponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Update(ctx context.Context, in *Updaterequest, opts ...client.CallOption) (*Updateresponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Update", in)
	out := new(Updateresponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Paihang(ctx context.Context, in *Userpaihangrequest, opts ...client.CallOption) (*Userpaihangresponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Paihang", in)
	out := new(Userpaihangresponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) Dengluget(ctx context.Context, in *Userdenglugetrequest, opts ...client.CallOption) (*Userdenglugetresponse, error) {
	req := c.c.NewRequest(c.name, "UserService.Dengluget", in)
	out := new(Userdenglugetresponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceHandler interface {
	Create(context.Context, *Createequest, *CreateResponse) error
	Get(context.Context, *Usergetrequest, *Usergetresponse) error
	Update(context.Context, *Updaterequest, *Updateresponse) error
	Paihang(context.Context, *Userpaihangrequest, *Userpaihangresponse) error
	Dengluget(context.Context, *Userdenglugetrequest, *Userdenglugetresponse) error
}

func RegisterUserServiceHandler(s server.Server, hdlr UserServiceHandler, opts ...server.HandlerOption) error {
	type userService interface {
		Create(ctx context.Context, in *Createequest, out *CreateResponse) error
		Get(ctx context.Context, in *Usergetrequest, out *Usergetresponse) error
		Update(ctx context.Context, in *Updaterequest, out *Updateresponse) error
		Paihang(ctx context.Context, in *Userpaihangrequest, out *Userpaihangresponse) error
		Dengluget(ctx context.Context, in *Userdenglugetrequest, out *Userdenglugetresponse) error
	}
	type UserService struct {
		userService
	}
	h := &userServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&UserService{h}, opts...))
}

type userServiceHandler struct {
	UserServiceHandler
}

func (h *userServiceHandler) Create(ctx context.Context, in *Createequest, out *CreateResponse) error {
	return h.UserServiceHandler.Create(ctx, in, out)
}

func (h *userServiceHandler) Get(ctx context.Context, in *Usergetrequest, out *Usergetresponse) error {
	return h.UserServiceHandler.Get(ctx, in, out)
}

func (h *userServiceHandler) Update(ctx context.Context, in *Updaterequest, out *Updateresponse) error {
	return h.UserServiceHandler.Update(ctx, in, out)
}

func (h *userServiceHandler) Paihang(ctx context.Context, in *Userpaihangrequest, out *Userpaihangresponse) error {
	return h.UserServiceHandler.Paihang(ctx, in, out)
}

func (h *userServiceHandler) Dengluget(ctx context.Context, in *Userdenglugetrequest, out *Userdenglugetresponse) error {
	return h.UserServiceHandler.Dengluget(ctx, in, out)
}
