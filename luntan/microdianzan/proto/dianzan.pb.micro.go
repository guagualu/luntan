// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: microdianzan/proto/dianzan.proto

package microdianzan

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DianzanService service

func NewDianzanServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DianzanService service

type DianzanService interface {
	Create(ctx context.Context, in *Createequest, opts ...client.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *Dianzangetrequest, opts ...client.CallOption) (*Dianzangetresponse, error)
	Delete(ctx context.Context, in *Dianzandeletrequest, opts ...client.CallOption) (*Dianzandeleteresponse, error)
	Dianzan(ctx context.Context, in *DianzanReq, opts ...client.CallOption) (*DianzanRsp, error)
}

type dianzanService struct {
	c    client.Client
	name string
}

func NewDianzanService(name string, c client.Client) DianzanService {
	return &dianzanService{
		c:    c,
		name: name,
	}
}

func (c *dianzanService) Create(ctx context.Context, in *Createequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "DianzanService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dianzanService) Get(ctx context.Context, in *Dianzangetrequest, opts ...client.CallOption) (*Dianzangetresponse, error) {
	req := c.c.NewRequest(c.name, "DianzanService.Get", in)
	out := new(Dianzangetresponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dianzanService) Delete(ctx context.Context, in *Dianzandeletrequest, opts ...client.CallOption) (*Dianzandeleteresponse, error) {
	req := c.c.NewRequest(c.name, "DianzanService.Delete", in)
	out := new(Dianzandeleteresponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dianzanService) Dianzan(ctx context.Context, in *DianzanReq, opts ...client.CallOption) (*DianzanRsp, error) {
	req := c.c.NewRequest(c.name, "DianzanService.Dianzan", in)
	out := new(DianzanRsp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DianzanService service

type DianzanServiceHandler interface {
	Create(context.Context, *Createequest, *CreateResponse) error
	Get(context.Context, *Dianzangetrequest, *Dianzangetresponse) error
	Delete(context.Context, *Dianzandeletrequest, *Dianzandeleteresponse) error
	Dianzan(context.Context, *DianzanReq, *DianzanRsp) error
}

func RegisterDianzanServiceHandler(s server.Server, hdlr DianzanServiceHandler, opts ...server.HandlerOption) error {
	type dianzanService interface {
		Create(ctx context.Context, in *Createequest, out *CreateResponse) error
		Get(ctx context.Context, in *Dianzangetrequest, out *Dianzangetresponse) error
		Delete(ctx context.Context, in *Dianzandeletrequest, out *Dianzandeleteresponse) error
		Dianzan(ctx context.Context, in *DianzanReq, out *DianzanRsp) error
	}
	type DianzanService struct {
		dianzanService
	}
	h := &dianzanServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DianzanService{h}, opts...))
}

type dianzanServiceHandler struct {
	DianzanServiceHandler
}

func (h *dianzanServiceHandler) Create(ctx context.Context, in *Createequest, out *CreateResponse) error {
	return h.DianzanServiceHandler.Create(ctx, in, out)
}

func (h *dianzanServiceHandler) Get(ctx context.Context, in *Dianzangetrequest, out *Dianzangetresponse) error {
	return h.DianzanServiceHandler.Get(ctx, in, out)
}

func (h *dianzanServiceHandler) Delete(ctx context.Context, in *Dianzandeletrequest, out *Dianzandeleteresponse) error {
	return h.DianzanServiceHandler.Delete(ctx, in, out)
}

func (h *dianzanServiceHandler) Dianzan(ctx context.Context, in *DianzanReq, out *DianzanRsp) error {
	return h.DianzanServiceHandler.Dianzan(ctx, in, out)
}
