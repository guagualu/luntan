// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: microtiezi/proto/tiezi.proto

package microtieiz

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for TieziService service

func NewTieziServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for TieziService service

type TieziService interface {
	Create(ctx context.Context, in *Createtieziquest, opts ...client.CallOption) (*CreatetieziResponse, error)
	Get(ctx context.Context, in *Tiezigetrequest, opts ...client.CallOption) (*Tiezigetresponse, error)
	List(ctx context.Context, in *Tiezilistrequest, opts ...client.CallOption) (*TiezilistResponse, error)
	Createpinglun(ctx context.Context, in *Createtiezipinglunquest, opts ...client.CallOption) (*CreatetiezipinglunResponse, error)
	Listpinglun(ctx context.Context, in *Tiezipinglunlistrequest, opts ...client.CallOption) (*TiezipinglunlistResponse, error)
}

type tieziService struct {
	c    client.Client
	name string
}

func NewTieziService(name string, c client.Client) TieziService {
	return &tieziService{
		c:    c,
		name: name,
	}
}

func (c *tieziService) Create(ctx context.Context, in *Createtieziquest, opts ...client.CallOption) (*CreatetieziResponse, error) {
	req := c.c.NewRequest(c.name, "TieziService.Create", in)
	out := new(CreatetieziResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tieziService) Get(ctx context.Context, in *Tiezigetrequest, opts ...client.CallOption) (*Tiezigetresponse, error) {
	req := c.c.NewRequest(c.name, "TieziService.Get", in)
	out := new(Tiezigetresponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tieziService) List(ctx context.Context, in *Tiezilistrequest, opts ...client.CallOption) (*TiezilistResponse, error) {
	req := c.c.NewRequest(c.name, "TieziService.List", in)
	out := new(TiezilistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tieziService) Createpinglun(ctx context.Context, in *Createtiezipinglunquest, opts ...client.CallOption) (*CreatetiezipinglunResponse, error) {
	req := c.c.NewRequest(c.name, "TieziService.Createpinglun", in)
	out := new(CreatetiezipinglunResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tieziService) Listpinglun(ctx context.Context, in *Tiezipinglunlistrequest, opts ...client.CallOption) (*TiezipinglunlistResponse, error) {
	req := c.c.NewRequest(c.name, "TieziService.Listpinglun", in)
	out := new(TiezipinglunlistResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TieziService service

type TieziServiceHandler interface {
	Create(context.Context, *Createtieziquest, *CreatetieziResponse) error
	Get(context.Context, *Tiezigetrequest, *Tiezigetresponse) error
	List(context.Context, *Tiezilistrequest, *TiezilistResponse) error
	Createpinglun(context.Context, *Createtiezipinglunquest, *CreatetiezipinglunResponse) error
	Listpinglun(context.Context, *Tiezipinglunlistrequest, *TiezipinglunlistResponse) error
}

func RegisterTieziServiceHandler(s server.Server, hdlr TieziServiceHandler, opts ...server.HandlerOption) error {
	type tieziService interface {
		Create(ctx context.Context, in *Createtieziquest, out *CreatetieziResponse) error
		Get(ctx context.Context, in *Tiezigetrequest, out *Tiezigetresponse) error
		List(ctx context.Context, in *Tiezilistrequest, out *TiezilistResponse) error
		Createpinglun(ctx context.Context, in *Createtiezipinglunquest, out *CreatetiezipinglunResponse) error
		Listpinglun(ctx context.Context, in *Tiezipinglunlistrequest, out *TiezipinglunlistResponse) error
	}
	type TieziService struct {
		tieziService
	}
	h := &tieziServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&TieziService{h}, opts...))
}

type tieziServiceHandler struct {
	TieziServiceHandler
}

func (h *tieziServiceHandler) Create(ctx context.Context, in *Createtieziquest, out *CreatetieziResponse) error {
	return h.TieziServiceHandler.Create(ctx, in, out)
}

func (h *tieziServiceHandler) Get(ctx context.Context, in *Tiezigetrequest, out *Tiezigetresponse) error {
	return h.TieziServiceHandler.Get(ctx, in, out)
}

func (h *tieziServiceHandler) List(ctx context.Context, in *Tiezilistrequest, out *TiezilistResponse) error {
	return h.TieziServiceHandler.List(ctx, in, out)
}

func (h *tieziServiceHandler) Createpinglun(ctx context.Context, in *Createtiezipinglunquest, out *CreatetiezipinglunResponse) error {
	return h.TieziServiceHandler.Createpinglun(ctx, in, out)
}

func (h *tieziServiceHandler) Listpinglun(ctx context.Context, in *Tiezipinglunlistrequest, out *TiezipinglunlistResponse) error {
	return h.TieziServiceHandler.Listpinglun(ctx, in, out)
}
