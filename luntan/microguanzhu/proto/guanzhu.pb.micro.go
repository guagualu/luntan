// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: microguanzhu/proto/guanzhu.proto

package microguanzhu

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GuanzhuService service

func NewGuanzhuServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GuanzhuService service

type GuanzhuService interface {
	Create(ctx context.Context, in *Createequest, opts ...client.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *Guanzhugetrequest, opts ...client.CallOption) (*Guanzhugetresponse, error)
	Delete(ctx context.Context, in *Guanzhudeletrequest, opts ...client.CallOption) (*Guanzhudeleteresponse, error)
	List(ctx context.Context, in *Guanzhulistrequest, opts ...client.CallOption) (*Guanzhulistresponse, error)
}

type guanzhuService struct {
	c    client.Client
	name string
}

func NewGuanzhuService(name string, c client.Client) GuanzhuService {
	return &guanzhuService{
		c:    c,
		name: name,
	}
}

func (c *guanzhuService) Create(ctx context.Context, in *Createequest, opts ...client.CallOption) (*CreateResponse, error) {
	req := c.c.NewRequest(c.name, "GuanzhuService.Create", in)
	out := new(CreateResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guanzhuService) Get(ctx context.Context, in *Guanzhugetrequest, opts ...client.CallOption) (*Guanzhugetresponse, error) {
	req := c.c.NewRequest(c.name, "GuanzhuService.Get", in)
	out := new(Guanzhugetresponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guanzhuService) Delete(ctx context.Context, in *Guanzhudeletrequest, opts ...client.CallOption) (*Guanzhudeleteresponse, error) {
	req := c.c.NewRequest(c.name, "GuanzhuService.Delete", in)
	out := new(Guanzhudeleteresponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *guanzhuService) List(ctx context.Context, in *Guanzhulistrequest, opts ...client.CallOption) (*Guanzhulistresponse, error) {
	req := c.c.NewRequest(c.name, "GuanzhuService.List", in)
	out := new(Guanzhulistresponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GuanzhuService service

type GuanzhuServiceHandler interface {
	Create(context.Context, *Createequest, *CreateResponse) error
	Get(context.Context, *Guanzhugetrequest, *Guanzhugetresponse) error
	Delete(context.Context, *Guanzhudeletrequest, *Guanzhudeleteresponse) error
	List(context.Context, *Guanzhulistrequest, *Guanzhulistresponse) error
}

func RegisterGuanzhuServiceHandler(s server.Server, hdlr GuanzhuServiceHandler, opts ...server.HandlerOption) error {
	type guanzhuService interface {
		Create(ctx context.Context, in *Createequest, out *CreateResponse) error
		Get(ctx context.Context, in *Guanzhugetrequest, out *Guanzhugetresponse) error
		Delete(ctx context.Context, in *Guanzhudeletrequest, out *Guanzhudeleteresponse) error
		List(ctx context.Context, in *Guanzhulistrequest, out *Guanzhulistresponse) error
	}
	type GuanzhuService struct {
		guanzhuService
	}
	h := &guanzhuServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GuanzhuService{h}, opts...))
}

type guanzhuServiceHandler struct {
	GuanzhuServiceHandler
}

func (h *guanzhuServiceHandler) Create(ctx context.Context, in *Createequest, out *CreateResponse) error {
	return h.GuanzhuServiceHandler.Create(ctx, in, out)
}

func (h *guanzhuServiceHandler) Get(ctx context.Context, in *Guanzhugetrequest, out *Guanzhugetresponse) error {
	return h.GuanzhuServiceHandler.Get(ctx, in, out)
}

func (h *guanzhuServiceHandler) Delete(ctx context.Context, in *Guanzhudeletrequest, out *Guanzhudeleteresponse) error {
	return h.GuanzhuServiceHandler.Delete(ctx, in, out)
}

func (h *guanzhuServiceHandler) List(ctx context.Context, in *Guanzhulistrequest, out *Guanzhulistresponse) error {
	return h.GuanzhuServiceHandler.List(ctx, in, out)
}
